@BOOK{Abouzahra2017,
  author = {Abouzahra, A. and Sabraoui, A. and Afdel, K.},
  publisher = {Ieee},
  title = {A Metamodel Composition Driven Approach to Design New Domain Specific Modeling Languages},
  year = {2017},
  address = {New York},
  series = {2017 European Conference on Electrical Engineering and Computer Science},
  abstract = {Designing a new domain specific modeling language is a complex and consuming task job effort. One solution is to compose existing DSMLs to form a new more complete DSML. Based on a metamodels composition we can improve the process of rapid prototyping of new DSMLs. In this paper we investigate the consequences of composing metamodels of DSMLs on their graphical syntaxes. Our motivation is to upgrade the quick development of graphical comments for a new DSML formed by the composition of multiple DSMLs metamodels. We explain how the DSMLs can be reused to rapidly form new ones with low cost. Thus, this work contributes by defining a set of rules to compose DSMLs and provide a layer for DSMLs graphical syntaxes composition. We propose three rules to compose DSMLs metamodels: reference, specialization and fusion. We have used a small use case to illustrate the approach. For each defined rule we apply it to the use case to exemplify it. We expose, throughout these examples, how graphical syntaxes can be reused. We also show on how graphical comments can be composed.},
  doi = {10.1109/eecs.2017.30},
  paper = {https://dx.doi.org/10.1109/eecs.2017.30}
}
@INBOOK{Alexander2007,
  author = {Alexander, Perry},
  pages = {263--276},
  publisher = {Morgan Kaufmann},
  title = {15 - Domain Interactions},
  year = {2007},
  address = {Burlington},
  series = {Systems on Silicon},
  type = {Book Section},
  abstract = {It is noted that the decisions made locally in one domain can have impacts on system-level requirements and other domain specific requirements. Rosetta defines an interaction as a collection of mechanisms for describing how information flows between modeling domains. Each interaction defines three kinds of information transfer. Translators define how information is transformed as it flows through a parameter shared by two facets. Translators handle both information translation and coordination of the communication process. Functors define transformations of facets from one domain to another. Because facets are simply Rosetta values, these transformations take the form of functions whose domain and range include facet types. Furthermore, algebra combinators, or simply combinators define mechanisms for combining two facets to produce a new facet. The primary use for combinator is to provide a capability for composing and refining or abstracting two facets in a single step. Moreover, combinators are like functors, except that the domain of a combinator must include two facets that can be composed into a single facet.}
}
